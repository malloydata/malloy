/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 * Autogenerated.
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

type MalloyInterfaceFieldType = {
  type: string;
  optional: boolean;
  array: boolean;
};

type MalloyInterfaceType =
  | {
      name: string;
      type: 'struct';
      fields: Record<string, MalloyInterfaceFieldType>;
    }
  | {name: string; type: 'union'; options: Record<string, string>}
  | {name: string; type: 'enum'; values: Record<string, number>};

export const MALLOY_INTERFACE_TYPES: Record<string, MalloyInterfaceType> = {
  'Aggregate': {
    'type': 'struct',
    'name': 'Aggregate',
    'fields': {
      'name': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'field': {
        'type': 'Field',
        'optional': false,
        'array': false,
      },
    },
  },
  'Annotation': {
    'type': 'struct',
    'name': 'Annotation',
    'fields': {
      'value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'AnonymousQueryInfo': {
    'type': 'struct',
    'name': 'AnonymousQueryInfo',
    'fields': {
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'definition': {
        'type': 'Query',
        'optional': true,
        'array': false,
      },
      'code': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'location': {
        'type': 'Location',
        'optional': true,
        'array': false,
      },
    },
  },
  'ArrayCell': {
    'type': 'struct',
    'name': 'ArrayCell',
    'fields': {
      'array_value': {
        'type': 'Cell',
        'array': true,
        'optional': false,
      },
    },
  },
  'ArrayType': {
    'type': 'struct',
    'name': 'ArrayType',
    'fields': {
      'element_type': {
        'type': 'AtomicType',
        'optional': false,
        'array': false,
      },
    },
  },
  'AtomicType': {
    'type': 'union',
    'name': 'AtomicType',
    'options': {
      'string_type': 'StringType',
      'boolean_type': 'BooleanType',
      'number_type': 'NumberType',
      'json_type': 'JSONType',
      'sql_native_type': 'SQLNativeType',
      'date_type': 'DateType',
      'timestamp_type': 'TimestampType',
      'array_type': 'ArrayType',
      'record_type': 'RecordType',
    },
  },
  'BooleanCell': {
    'type': 'struct',
    'name': 'BooleanCell',
    'fields': {
      'boolean_value': {
        'type': 'boolean',
        'optional': false,
        'array': false,
      },
    },
  },
  'BooleanLiteral': {
    'type': 'struct',
    'name': 'BooleanLiteral',
    'fields': {
      'boolean_value': {
        'type': 'boolean',
        'optional': false,
        'array': false,
      },
    },
  },
  'BooleanType': {
    'type': 'struct',
    'name': 'BooleanType',
    'fields': {},
  },
  'Cell': {
    'type': 'union',
    'name': 'Cell',
    'options': {
      'string_cell': 'StringCell',
      'boolean_cell': 'BooleanCell',
      'date_cell': 'DateCell',
      'timestamp_cell': 'TimestampCell',
      'number_cell': 'NumberCell',
      'json_cell': 'JSONCell',
      'record_cell': 'RecordCell',
      'array_cell': 'ArrayCell',
      'null_cell': 'NullCell',
      'sql_native_cell': 'SQLNativeCell',
    },
  },
  'CompileModelRequest': {
    'type': 'struct',
    'name': 'CompileModelRequest',
    'fields': {
      'model_url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'extend_model_url': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'CompileModelResponse': {
    'type': 'struct',
    'name': 'CompileModelResponse',
    'fields': {
      'model': {
        'type': 'ModelInfo',
        'optional': true,
        'array': false,
      },
      'logs': {
        'type': 'LogMessage',
        'array': true,
        'optional': true,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
      'translations': {
        'type': 'Translation',
        'array': true,
        'optional': true,
      },
    },
  },
  'CompileQueryRequest': {
    'type': 'struct',
    'name': 'CompileQueryRequest',
    'fields': {
      'model_url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'query': {
        'type': 'Query',
        'optional': false,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'CompileQueryResponse': {
    'type': 'struct',
    'name': 'CompileQueryResponse',
    'fields': {
      'result': {
        'type': 'Result',
        'optional': true,
        'array': false,
      },
      'logs': {
        'type': 'LogMessage',
        'array': true,
        'optional': true,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
      'translations': {
        'type': 'Translation',
        'array': true,
        'optional': true,
      },
    },
  },
  'CompileSourceRequest': {
    'type': 'struct',
    'name': 'CompileSourceRequest',
    'fields': {
      'model_url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'extend_model_url': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'CompileSourceResponse': {
    'type': 'struct',
    'name': 'CompileSourceResponse',
    'fields': {
      'source': {
        'type': 'SourceInfo',
        'optional': true,
        'array': false,
      },
      'logs': {
        'type': 'LogMessage',
        'array': true,
        'optional': true,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'CompilerNeeds': {
    'type': 'struct',
    'name': 'CompilerNeeds',
    'fields': {
      'table_schemas': {
        'type': 'SQLTable',
        'array': true,
        'optional': true,
      },
      'sql_schemas': {
        'type': 'SQLQuery',
        'array': true,
        'optional': true,
      },
      'files': {
        'type': 'File',
        'array': true,
        'optional': true,
      },
      'connections': {
        'type': 'Connection',
        'array': true,
        'optional': true,
      },
      'translations': {
        'type': 'Translation',
        'array': true,
        'optional': true,
      },
    },
  },
  'Connection': {
    'type': 'struct',
    'name': 'Connection',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'dialect': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
    },
  },
  'Data': {
    'type': 'union',
    'name': 'Data',
    'options': {
      'record_cell': 'RecordCell',
      'array_cell': 'ArrayCell',
    },
  },
  'DateCell': {
    'type': 'struct',
    'name': 'DateCell',
    'fields': {
      'date_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'DateLiteral': {
    'type': 'struct',
    'name': 'DateLiteral',
    'fields': {
      'date_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'granularity': {
        'type': 'DateTimeframe',
        'optional': true,
        'array': false,
      },
    },
  },
  'DateTimeframe': {
    'type': 'enum',
    'name': 'DateTimeframe',
    'values': {
      'year': 1,
      'quarter': 2,
      'month': 3,
      'week': 4,
      'day': 5,
    },
  },
  'DateType': {
    'type': 'struct',
    'name': 'DateType',
    'fields': {
      'timeframe': {
        'type': 'DateTimeframe',
        'optional': true,
        'array': false,
      },
    },
  },
  'DimensionInfo': {
    'type': 'struct',
    'name': 'DimensionInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'type': {
        'type': 'AtomicType',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
    },
  },
  'DocumentPosition': {
    'type': 'struct',
    'name': 'DocumentPosition',
    'fields': {
      'line': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
      'character': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
    },
  },
  'DocumentRange': {
    'type': 'struct',
    'name': 'DocumentRange',
    'fields': {
      'start': {
        'type': 'DocumentPosition',
        'optional': false,
        'array': false,
      },
      'end': {
        'type': 'DocumentPosition',
        'optional': false,
        'array': false,
      },
    },
  },
  'Expression': {
    'type': 'union',
    'name': 'Expression',
    'options': {
      'field_reference': 'Reference',
      'time_truncation': 'TimeTruncationFieldReference',
      'filtered_field': 'FilteredField',
    },
  },
  'Field': {
    'type': 'struct',
    'name': 'Field',
    'fields': {
      'expression': {
        'type': 'Expression',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
    },
  },
  'FieldInfo': {
    'type': 'union',
    'name': 'FieldInfo',
    'options': {
      'dimension': 'DimensionInfo',
      'measure': 'MeasureInfo',
      'join': 'JoinInfo',
      'view': 'ViewInfo',
    },
  },
  'File': {
    'type': 'struct',
    'name': 'File',
    'fields': {
      'url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'contents': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'invalidation_key': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
    },
  },
  'Filter': {
    'type': 'union',
    'name': 'Filter',
    'options': {
      'filter_string': 'FilterStringApplication',
    },
  },
  'FilterStringApplication': {
    'type': 'struct',
    'name': 'FilterStringApplication',
    'fields': {
      'field_reference': {
        'type': 'Reference',
        'optional': false,
        'array': false,
      },
      'filter': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'FilteredField': {
    'type': 'struct',
    'name': 'FilteredField',
    'fields': {
      'field_reference': {
        'type': 'Reference',
        'optional': false,
        'array': false,
      },
      'where': {
        'type': 'Where',
        'array': true,
        'optional': false,
      },
    },
  },
  'GroupBy': {
    'type': 'struct',
    'name': 'GroupBy',
    'fields': {
      'name': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'field': {
        'type': 'Field',
        'optional': false,
        'array': false,
      },
    },
  },
  'JSONCell': {
    'type': 'struct',
    'name': 'JSONCell',
    'fields': {
      'json_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'JSONType': {
    'type': 'struct',
    'name': 'JSONType',
    'fields': {},
  },
  'JoinInfo': {
    'type': 'struct',
    'name': 'JoinInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'relationship': {
        'type': 'Relationship',
        'optional': false,
        'array': false,
      },
    },
  },
  'Limit': {
    'type': 'struct',
    'name': 'Limit',
    'fields': {
      'limit': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
    },
  },
  'LiteralValue': {
    'type': 'union',
    'name': 'LiteralValue',
    'options': {
      'string_literal': 'StringLiteral',
      'number_literal': 'NumberLiteral',
      'date_literal': 'DateLiteral',
      'timestamp_literal': 'TimestampLiteral',
      'boolean_literal': 'BooleanLiteral',
      'null_literal': 'NullLiteral',
    },
  },
  'Location': {
    'type': 'struct',
    'name': 'Location',
    'fields': {
      'url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'range': {
        'type': 'Range',
        'optional': false,
        'array': false,
      },
    },
  },
  'LogMessage': {
    'type': 'struct',
    'name': 'LogMessage',
    'fields': {
      'url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'range': {
        'type': 'DocumentRange',
        'optional': false,
        'array': false,
      },
      'severity': {
        'type': 'LogSeverity',
        'optional': false,
        'array': false,
      },
      'message': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'LogSeverity': {
    'type': 'enum',
    'name': 'LogSeverity',
    'values': {
      'debug': 1,
      'info': 2,
      'warn': 3,
      'error': 4,
    },
  },
  'MeasureInfo': {
    'type': 'struct',
    'name': 'MeasureInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'type': {
        'type': 'AtomicType',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
    },
  },
  'ModelEntryValue': {
    'type': 'union',
    'name': 'ModelEntryValue',
    'options': {
      'source': 'SourceInfo',
      'query': 'QueryInfo',
    },
  },
  'ModelInfo': {
    'type': 'struct',
    'name': 'ModelInfo',
    'fields': {
      'entries': {
        'type': 'ModelEntryValue',
        'array': true,
        'optional': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'anonymous_queries': {
        'type': 'AnonymousQueryInfo',
        'array': true,
        'optional': false,
      },
    },
  },
  'Nest': {
    'type': 'struct',
    'name': 'Nest',
    'fields': {
      'name': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'view': {
        'type': 'View',
        'optional': false,
        'array': false,
      },
    },
  },
  'NullCell': {
    'type': 'struct',
    'name': 'NullCell',
    'fields': {},
  },
  'NullLiteral': {
    'type': 'struct',
    'name': 'NullLiteral',
    'fields': {},
  },
  'NumberCell': {
    'type': 'struct',
    'name': 'NumberCell',
    'fields': {
      'number_value': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
    },
  },
  'NumberLiteral': {
    'type': 'struct',
    'name': 'NumberLiteral',
    'fields': {
      'number_value': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
    },
  },
  'NumberSubtype': {
    'type': 'enum',
    'name': 'NumberSubtype',
    'values': {
      'integer': 1,
      'decimal': 2,
    },
  },
  'NumberType': {
    'type': 'struct',
    'name': 'NumberType',
    'fields': {
      'subtype': {
        'type': 'NumberSubtype',
        'optional': true,
        'array': false,
      },
    },
  },
  'OrderBy': {
    'type': 'struct',
    'name': 'OrderBy',
    'fields': {
      'field_reference': {
        'type': 'Reference',
        'optional': false,
        'array': false,
      },
      'direction': {
        'type': 'OrderByDirection',
        'optional': true,
        'array': false,
      },
    },
  },
  'OrderByDirection': {
    'type': 'enum',
    'name': 'OrderByDirection',
    'values': {
      'asc': 1,
      'desc': 2,
    },
  },
  'ParameterInfo': {
    'type': 'struct',
    'name': 'ParameterInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'type': {
        'type': 'AtomicType',
        'optional': false,
        'array': false,
      },
      'default_value': {
        'type': 'LiteralValue',
        'optional': true,
        'array': false,
      },
    },
  },
  'ParameterValue': {
    'type': 'struct',
    'name': 'ParameterValue',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'value': {
        'type': 'LiteralValue',
        'optional': false,
        'array': false,
      },
    },
  },
  'Position': {
    'type': 'struct',
    'name': 'Position',
    'fields': {
      'line': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
      'character': {
        'type': 'number',
        'optional': false,
        'array': false,
      },
    },
  },
  'Query': {
    'type': 'struct',
    'name': 'Query',
    'fields': {
      'definition': {
        'type': 'QueryDefinition',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
    },
  },
  'QueryArrow': {
    'type': 'struct',
    'name': 'QueryArrow',
    'fields': {
      'source': {
        'type': 'QueryArrowSource',
        'optional': false,
        'array': false,
      },
      'view': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
    },
  },
  'QueryArrowSource': {
    'type': 'union',
    'name': 'QueryArrowSource',
    'options': {
      'refinement': 'QueryRefinement',
      'source_reference': 'Reference',
    },
  },
  'QueryDefinition': {
    'type': 'union',
    'name': 'QueryDefinition',
    'options': {
      'arrow': 'QueryArrow',
      'query_reference': 'Reference',
      'refinement': 'QueryRefinement',
    },
  },
  'QueryInfo': {
    'type': 'struct',
    'name': 'QueryInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'definition': {
        'type': 'Query',
        'optional': true,
        'array': false,
      },
      'code': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'location': {
        'type': 'Location',
        'optional': true,
        'array': false,
      },
    },
  },
  'QueryRefinement': {
    'type': 'struct',
    'name': 'QueryRefinement',
    'fields': {
      'base': {
        'type': 'QueryDefinition',
        'optional': false,
        'array': false,
      },
      'refinement': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
    },
  },
  'Range': {
    'type': 'struct',
    'name': 'Range',
    'fields': {
      'start': {
        'type': 'Position',
        'optional': false,
        'array': false,
      },
      'end': {
        'type': 'Position',
        'optional': false,
        'array': false,
      },
    },
  },
  'RecordCell': {
    'type': 'struct',
    'name': 'RecordCell',
    'fields': {
      'record_value': {
        'type': 'Cell',
        'array': true,
        'optional': false,
      },
    },
  },
  'RecordType': {
    'type': 'struct',
    'name': 'RecordType',
    'fields': {
      'fields': {
        'type': 'DimensionInfo',
        'array': true,
        'optional': false,
      },
    },
  },
  'Reference': {
    'type': 'struct',
    'name': 'Reference',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'path': {
        'type': 'string',
        'array': true,
        'optional': true,
      },
      'parameters': {
        'type': 'ParameterValue',
        'array': true,
        'optional': true,
      },
    },
  },
  'Relationship': {
    'type': 'enum',
    'name': 'Relationship',
    'values': {
      'one': 1,
      'many': 2,
      'cross': 3,
    },
  },
  'Result': {
    'type': 'struct',
    'name': 'Result',
    'fields': {
      'data': {
        'type': 'Data',
        'optional': true,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'sql': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
      'connection_name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'model_annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'query_timezone': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
    },
  },
  'RunIndexQueryRequest': {
    'type': 'struct',
    'name': 'RunIndexQueryRequest',
    'fields': {
      'model_url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'source_name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'RunIndexQueryResponse': {
    'type': 'struct',
    'name': 'RunIndexQueryResponse',
    'fields': {
      'result': {
        'type': 'Result',
        'optional': true,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'RunQueryRequest': {
    'type': 'struct',
    'name': 'RunQueryRequest',
    'fields': {
      'model_url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'query': {
        'type': 'Query',
        'optional': false,
        'array': false,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'RunQueryResponse': {
    'type': 'struct',
    'name': 'RunQueryResponse',
    'fields': {
      'result': {
        'type': 'Result',
        'optional': true,
        'array': false,
      },
      'logs': {
        'type': 'LogMessage',
        'array': true,
        'optional': true,
      },
      'compiler_needs': {
        'type': 'CompilerNeeds',
        'optional': true,
        'array': false,
      },
    },
  },
  'SQLNativeCell': {
    'type': 'struct',
    'name': 'SQLNativeCell',
    'fields': {
      'sql_native_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'SQLNativeType': {
    'type': 'struct',
    'name': 'SQLNativeType',
    'fields': {
      'sql_type': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
    },
  },
  'SQLQuery': {
    'type': 'struct',
    'name': 'SQLQuery',
    'fields': {
      'sql': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': true,
        'array': false,
      },
      'connection_name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'SQLTable': {
    'type': 'struct',
    'name': 'SQLTable',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': true,
        'array': false,
      },
      'connection_name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'Schema': {
    'type': 'struct',
    'name': 'Schema',
    'fields': {
      'fields': {
        'type': 'FieldInfo',
        'array': true,
        'optional': false,
      },
    },
  },
  'SourceInfo': {
    'type': 'struct',
    'name': 'SourceInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'parameters': {
        'type': 'ParameterInfo',
        'array': true,
        'optional': true,
      },
    },
  },
  'StringCell': {
    'type': 'struct',
    'name': 'StringCell',
    'fields': {
      'string_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'StringLiteral': {
    'type': 'struct',
    'name': 'StringLiteral',
    'fields': {
      'string_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'StringType': {
    'type': 'struct',
    'name': 'StringType',
    'fields': {},
  },
  'TimeTruncationFieldReference': {
    'type': 'struct',
    'name': 'TimeTruncationFieldReference',
    'fields': {
      'field_reference': {
        'type': 'Reference',
        'optional': false,
        'array': false,
      },
      'truncation': {
        'type': 'TimestampTimeframe',
        'optional': false,
        'array': false,
      },
    },
  },
  'TimestampCell': {
    'type': 'struct',
    'name': 'TimestampCell',
    'fields': {
      'timestamp_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
    },
  },
  'TimestampLiteral': {
    'type': 'struct',
    'name': 'TimestampLiteral',
    'fields': {
      'timestamp_value': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'granularity': {
        'type': 'TimestampTimeframe',
        'optional': true,
        'array': false,
      },
    },
  },
  'TimestampTimeframe': {
    'type': 'enum',
    'name': 'TimestampTimeframe',
    'values': {
      'year': 1,
      'quarter': 2,
      'month': 3,
      'week': 4,
      'day': 5,
      'hour': 6,
      'minute': 7,
      'second': 8,
    },
  },
  'TimestampType': {
    'type': 'struct',
    'name': 'TimestampType',
    'fields': {
      'timeframe': {
        'type': 'TimestampTimeframe',
        'optional': true,
        'array': false,
      },
    },
  },
  'Translation': {
    'type': 'struct',
    'name': 'Translation',
    'fields': {
      'url': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'compiled_model_json': {
        'type': 'string',
        'optional': true,
        'array': false,
      },
    },
  },
  'View': {
    'type': 'struct',
    'name': 'View',
    'fields': {
      'definition': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
    },
  },
  'ViewArrow': {
    'type': 'struct',
    'name': 'ViewArrow',
    'fields': {
      'source': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
      'view': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
    },
  },
  'ViewDefinition': {
    'type': 'union',
    'name': 'ViewDefinition',
    'options': {
      'arrow': 'ViewArrow',
      'view_reference': 'Reference',
      'refinement': 'ViewRefinement',
      'segment': 'ViewSegment',
    },
  },
  'ViewInfo': {
    'type': 'struct',
    'name': 'ViewInfo',
    'fields': {
      'name': {
        'type': 'string',
        'optional': false,
        'array': false,
      },
      'schema': {
        'type': 'Schema',
        'optional': false,
        'array': false,
      },
      'annotations': {
        'type': 'Annotation',
        'array': true,
        'optional': true,
      },
      'definition': {
        'type': 'View',
        'optional': true,
        'array': false,
      },
    },
  },
  'ViewOperation': {
    'type': 'union',
    'name': 'ViewOperation',
    'options': {
      'group_by': 'GroupBy',
      'aggregate': 'Aggregate',
      'order_by': 'OrderBy',
      'limit': 'Limit',
      'where': 'Where',
      'nest': 'Nest',
    },
  },
  'ViewRefinement': {
    'type': 'struct',
    'name': 'ViewRefinement',
    'fields': {
      'base': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
      'refinement': {
        'type': 'ViewDefinition',
        'optional': false,
        'array': false,
      },
    },
  },
  'ViewSegment': {
    'type': 'struct',
    'name': 'ViewSegment',
    'fields': {
      'operations': {
        'type': 'ViewOperation',
        'array': true,
        'optional': false,
      },
    },
  },
  'Where': {
    'type': 'struct',
    'name': 'Where',
    'fields': {
      'filter': {
        'type': 'Filter',
        'optional': false,
        'array': false,
      },
    },
  },
};

export type Aggregate = {
  name?: string;
  field: Field;
};

export type Annotation = {
  value: string;
};

export type AnonymousQueryInfo = {
  schema: Schema;
  annotations?: Array<Annotation>;
  definition?: Query;
  code?: string;
  location?: Location;
};

export type ArrayCell = {
  array_value: Array<Cell>;
};

export type ArrayType = {
  element_type: AtomicType;
};

export type AtomicTypeType =
  | 'string_type'
  | 'boolean_type'
  | 'number_type'
  | 'json_type'
  | 'sql_native_type'
  | 'date_type'
  | 'timestamp_type'
  | 'array_type'
  | 'record_type';

export type AtomicType =
  | AtomicTypeWithStringType
  | AtomicTypeWithBooleanType
  | AtomicTypeWithNumberType
  | AtomicTypeWithJSONType
  | AtomicTypeWithSQLNativeType
  | AtomicTypeWithDateType
  | AtomicTypeWithTimestampType
  | AtomicTypeWithArrayType
  | AtomicTypeWithRecordType;

export type AtomicTypeWithStringType = {kind: 'string_type'} & StringType;

export type AtomicTypeWithBooleanType = {kind: 'boolean_type'} & BooleanType;

export type AtomicTypeWithNumberType = {kind: 'number_type'} & NumberType;

export type AtomicTypeWithJSONType = {kind: 'json_type'} & JSONType;

export type AtomicTypeWithSQLNativeType = {
  kind: 'sql_native_type';
} & SQLNativeType;

export type AtomicTypeWithDateType = {kind: 'date_type'} & DateType;

export type AtomicTypeWithTimestampType = {
  kind: 'timestamp_type';
} & TimestampType;

export type AtomicTypeWithArrayType = {kind: 'array_type'} & ArrayType;

export type AtomicTypeWithRecordType = {kind: 'record_type'} & RecordType;

export type BooleanCell = {
  boolean_value: boolean;
};

export type BooleanLiteral = {
  boolean_value: boolean;
};

export type BooleanType = {};

export type CellType =
  | 'string_cell'
  | 'boolean_cell'
  | 'date_cell'
  | 'timestamp_cell'
  | 'number_cell'
  | 'json_cell'
  | 'record_cell'
  | 'array_cell'
  | 'null_cell'
  | 'sql_native_cell';

export type Cell =
  | CellWithStringCell
  | CellWithBooleanCell
  | CellWithDateCell
  | CellWithTimestampCell
  | CellWithNumberCell
  | CellWithJSONCell
  | CellWithRecordCell
  | CellWithArrayCell
  | CellWithNullCell
  | CellWithSQLNativeCell;

export type CellWithStringCell = {kind: 'string_cell'} & StringCell;

export type CellWithBooleanCell = {kind: 'boolean_cell'} & BooleanCell;

export type CellWithDateCell = {kind: 'date_cell'} & DateCell;

export type CellWithTimestampCell = {kind: 'timestamp_cell'} & TimestampCell;

export type CellWithNumberCell = {kind: 'number_cell'} & NumberCell;

export type CellWithJSONCell = {kind: 'json_cell'} & JSONCell;

export type CellWithRecordCell = {kind: 'record_cell'} & RecordCell;

export type CellWithArrayCell = {kind: 'array_cell'} & ArrayCell;

export type CellWithNullCell = {kind: 'null_cell'} & NullCell;

export type CellWithSQLNativeCell = {kind: 'sql_native_cell'} & SQLNativeCell;

export type CompileModelRequest = {
  model_url: string;
  extend_model_url?: string;
  compiler_needs?: CompilerNeeds;
};

export type CompileModelResponse = {
  model?: ModelInfo;
  logs?: Array<LogMessage>;
  compiler_needs?: CompilerNeeds;
  translations?: Array<Translation>;
};

export type CompileQueryRequest = {
  model_url: string;
  query: Query;
  compiler_needs?: CompilerNeeds;
};

export type CompileQueryResponse = {
  result?: Result;
  logs?: Array<LogMessage>;
  compiler_needs?: CompilerNeeds;
  translations?: Array<Translation>;
};

export type CompileSourceRequest = {
  model_url: string;
  name: string;
  extend_model_url?: string;
  compiler_needs?: CompilerNeeds;
};

export type CompileSourceResponse = {
  source?: SourceInfo;
  logs?: Array<LogMessage>;
  compiler_needs?: CompilerNeeds;
};

export type CompilerNeeds = {
  table_schemas?: Array<SQLTable>;
  sql_schemas?: Array<SQLQuery>;
  files?: Array<File>;
  connections?: Array<Connection>;
  translations?: Array<Translation>;
};

export type Connection = {
  name: string;
  dialect?: string;
};

export type DataType = 'record_cell' | 'array_cell';

export type Data = DataWithRecordCell | DataWithArrayCell;

export type DataWithRecordCell = {kind: 'record_cell'} & RecordCell;

export type DataWithArrayCell = {kind: 'array_cell'} & ArrayCell;

export type DateCell = {
  date_value: string;
};

export type DateLiteral = {
  date_value: string;
  granularity?: DateTimeframe;
};

export type DateTimeframe = 'year' | 'quarter' | 'month' | 'week' | 'day';

export type DateType = {
  timeframe?: DateTimeframe;
};

export type DimensionInfo = {
  name: string;
  type: AtomicType;
  annotations?: Array<Annotation>;
};

export type DocumentPosition = {
  line: number;
  character: number;
};

export type DocumentRange = {
  start: DocumentPosition;
  end: DocumentPosition;
};

export type ExpressionType =
  | 'field_reference'
  | 'time_truncation'
  | 'filtered_field';

export type Expression =
  | ExpressionWithFieldReference
  | ExpressionWithTimeTruncation
  | ExpressionWithFilteredField;

export type ExpressionWithFieldReference = {
  kind: 'field_reference';
} & Reference;

export type ExpressionWithTimeTruncation = {
  kind: 'time_truncation';
} & TimeTruncationFieldReference;

export type ExpressionWithFilteredField = {
  kind: 'filtered_field';
} & FilteredField;

export type Field = {
  expression: Expression;
  annotations?: Array<Annotation>;
};

export type FieldInfoType = 'dimension' | 'measure' | 'join' | 'view';

export type FieldInfo =
  | FieldInfoWithDimension
  | FieldInfoWithMeasure
  | FieldInfoWithJoin
  | FieldInfoWithView;

export type FieldInfoWithDimension = {kind: 'dimension'} & DimensionInfo;

export type FieldInfoWithMeasure = {kind: 'measure'} & MeasureInfo;

export type FieldInfoWithJoin = {kind: 'join'} & JoinInfo;

export type FieldInfoWithView = {kind: 'view'} & ViewInfo;

export type File = {
  url: string;
  contents?: string;
  invalidation_key?: string;
};

export type FilterType = 'filter_string';

export type Filter = FilterWithFilterString;

export type FilterWithFilterString = {
  kind: 'filter_string';
} & FilterStringApplication;

export type FilterStringApplication = {
  field_reference: Reference;
  filter: string;
};

export type FilteredField = {
  field_reference: Reference;
  where: Array<Where>;
};

export type GroupBy = {
  name?: string;
  field: Field;
};

export type JSONCell = {
  json_value: string;
};

export type JSONType = {};

export type JoinInfo = {
  name: string;
  schema: Schema;
  annotations?: Array<Annotation>;
  relationship: Relationship;
};

export type Limit = {
  limit: number;
};

export type LiteralValueType =
  | 'string_literal'
  | 'number_literal'
  | 'date_literal'
  | 'timestamp_literal'
  | 'boolean_literal'
  | 'null_literal';

export type LiteralValue =
  | LiteralValueWithStringLiteral
  | LiteralValueWithNumberLiteral
  | LiteralValueWithDateLiteral
  | LiteralValueWithTimestampLiteral
  | LiteralValueWithBooleanLiteral
  | LiteralValueWithNullLiteral;

export type LiteralValueWithStringLiteral = {
  kind: 'string_literal';
} & StringLiteral;

export type LiteralValueWithNumberLiteral = {
  kind: 'number_literal';
} & NumberLiteral;

export type LiteralValueWithDateLiteral = {kind: 'date_literal'} & DateLiteral;

export type LiteralValueWithTimestampLiteral = {
  kind: 'timestamp_literal';
} & TimestampLiteral;

export type LiteralValueWithBooleanLiteral = {
  kind: 'boolean_literal';
} & BooleanLiteral;

export type LiteralValueWithNullLiteral = {kind: 'null_literal'} & NullLiteral;

export type Location = {
  url: string;
  range: Range;
};

export type LogMessage = {
  url: string;
  range: DocumentRange;
  severity: LogSeverity;
  message: string;
};

export type LogSeverity = 'debug' | 'info' | 'warn' | 'error';

export type MeasureInfo = {
  name: string;
  type: AtomicType;
  annotations?: Array<Annotation>;
};

export type ModelEntryValueType = 'source' | 'query';

export type ModelEntryValue =
  | ModelEntryValueWithSource
  | ModelEntryValueWithQuery;

export type ModelEntryValueWithSource = {kind: 'source'} & SourceInfo;

export type ModelEntryValueWithQuery = {kind: 'query'} & QueryInfo;

export type ModelInfo = {
  entries: Array<ModelEntryValue>;
  annotations?: Array<Annotation>;
  anonymous_queries: Array<AnonymousQueryInfo>;
};

export type Nest = {
  name?: string;
  view: View;
};

export type NullCell = {};

export type NullLiteral = {};

export type NumberCell = {
  number_value: number;
};

export type NumberLiteral = {
  number_value: number;
};

export type NumberSubtype = 'integer' | 'decimal';

export type NumberType = {
  subtype?: NumberSubtype;
};

export type OrderBy = {
  field_reference: Reference;
  direction?: OrderByDirection;
};

export type OrderByDirection = 'asc' | 'desc';

export type ParameterInfo = {
  name: string;
  type: AtomicType;
  default_value?: LiteralValue;
};

export type ParameterValue = {
  name: string;
  value: LiteralValue;
};

export type Position = {
  line: number;
  character: number;
};

export type Query = {
  definition: QueryDefinition;
  annotations?: Array<Annotation>;
};

export type QueryArrow = {
  source: QueryArrowSource;
  view: ViewDefinition;
};

export type QueryArrowSourceType = 'refinement' | 'source_reference';

export type QueryArrowSource =
  | QueryArrowSourceWithRefinement
  | QueryArrowSourceWithSourceReference;

export type QueryArrowSourceWithRefinement = {
  kind: 'refinement';
} & QueryRefinement;

export type QueryArrowSourceWithSourceReference = {
  kind: 'source_reference';
} & Reference;

export type QueryDefinitionType = 'arrow' | 'query_reference' | 'refinement';

export type QueryDefinition =
  | QueryDefinitionWithArrow
  | QueryDefinitionWithQueryReference
  | QueryDefinitionWithRefinement;

export type QueryDefinitionWithArrow = {kind: 'arrow'} & QueryArrow;

export type QueryDefinitionWithQueryReference = {
  kind: 'query_reference';
} & Reference;

export type QueryDefinitionWithRefinement = {
  kind: 'refinement';
} & QueryRefinement;

export type QueryInfo = {
  name: string;
  schema: Schema;
  annotations?: Array<Annotation>;
  definition?: Query;
  code?: string;
  location?: Location;
};

export type QueryRefinement = {
  base: QueryDefinition;
  refinement: ViewDefinition;
};

export type Range = {
  start: Position;
  end: Position;
};

export type RecordCell = {
  record_value: Array<Cell>;
};

export type RecordType = {
  fields: Array<DimensionInfo>;
};

export type Reference = {
  name: string;
  path?: Array<string>;
  parameters?: Array<ParameterValue>;
};

export type Relationship = 'one' | 'many' | 'cross';

export type Result = {
  data?: Data;
  schema: Schema;
  sql?: string;
  connection_name: string;
  annotations?: Array<Annotation>;
  model_annotations?: Array<Annotation>;
  query_timezone?: string;
};

export type RunIndexQueryRequest = {
  model_url: string;
  source_name: string;
  compiler_needs?: CompilerNeeds;
};

export type RunIndexQueryResponse = {
  result?: Result;
  compiler_needs?: CompilerNeeds;
};

export type RunQueryRequest = {
  model_url: string;
  query: Query;
  compiler_needs?: CompilerNeeds;
};

export type RunQueryResponse = {
  result?: Result;
  logs?: Array<LogMessage>;
  compiler_needs?: CompilerNeeds;
};

export type SQLNativeCell = {
  sql_native_value: string;
};

export type SQLNativeType = {
  sql_type?: string;
};

export type SQLQuery = {
  sql: string;
  schema?: Schema;
  connection_name: string;
};

export type SQLTable = {
  name: string;
  schema?: Schema;
  connection_name: string;
};

export type Schema = {
  fields: Array<FieldInfo>;
};

export type SourceInfo = {
  name: string;
  schema: Schema;
  annotations?: Array<Annotation>;
  parameters?: Array<ParameterInfo>;
};

export type StringCell = {
  string_value: string;
};

export type StringLiteral = {
  string_value: string;
};

export type StringType = {};

export type TimeTruncationFieldReference = {
  field_reference: Reference;
  truncation: TimestampTimeframe;
};

export type TimestampCell = {
  timestamp_value: string;
};

export type TimestampLiteral = {
  timestamp_value: string;
  granularity?: TimestampTimeframe;
};

export type TimestampTimeframe =
  | 'year'
  | 'quarter'
  | 'month'
  | 'week'
  | 'day'
  | 'hour'
  | 'minute'
  | 'second';

export type TimestampType = {
  timeframe?: TimestampTimeframe;
};

export type Translation = {
  url: string;
  compiled_model_json?: string;
};

export type View = {
  definition: ViewDefinition;
  annotations?: Array<Annotation>;
};

export type ViewArrow = {
  source: ViewDefinition;
  view: ViewDefinition;
};

export type ViewDefinitionType =
  | 'arrow'
  | 'view_reference'
  | 'refinement'
  | 'segment';

export type ViewDefinition =
  | ViewDefinitionWithArrow
  | ViewDefinitionWithViewReference
  | ViewDefinitionWithRefinement
  | ViewDefinitionWithSegment;

export type ViewDefinitionWithArrow = {kind: 'arrow'} & ViewArrow;

export type ViewDefinitionWithViewReference = {
  kind: 'view_reference';
} & Reference;

export type ViewDefinitionWithRefinement = {
  kind: 'refinement';
} & ViewRefinement;

export type ViewDefinitionWithSegment = {kind: 'segment'} & ViewSegment;

export type ViewInfo = {
  name: string;
  schema: Schema;
  annotations?: Array<Annotation>;
  definition?: View;
};

export type ViewOperationType =
  | 'group_by'
  | 'aggregate'
  | 'order_by'
  | 'limit'
  | 'where'
  | 'nest';

export type ViewOperation =
  | ViewOperationWithGroupBy
  | ViewOperationWithAggregate
  | ViewOperationWithOrderBy
  | ViewOperationWithLimit
  | ViewOperationWithWhere
  | ViewOperationWithNest;

export type ViewOperationWithGroupBy = {kind: 'group_by'} & GroupBy;

export type ViewOperationWithAggregate = {kind: 'aggregate'} & Aggregate;

export type ViewOperationWithOrderBy = {kind: 'order_by'} & OrderBy;

export type ViewOperationWithLimit = {kind: 'limit'} & Limit;

export type ViewOperationWithWhere = {kind: 'where'} & Where;

export type ViewOperationWithNest = {kind: 'nest'} & Nest;

export type ViewRefinement = {
  base: ViewDefinition;
  refinement: ViewDefinition;
};

export type ViewSegment = {
  operations: Array<ViewOperation>;
};

export type Where = {
  filter: Filter;
};

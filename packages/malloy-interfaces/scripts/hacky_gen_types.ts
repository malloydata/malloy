import * as fs from 'fs';

// eslint-disable-next-line no-console
console.log(`/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 * Autogenerated.
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/`);

function snakeToCamel(m: string) {
  return m.replace(/_([a-z])/g, g => g[1].toUpperCase());
}

function fixEnum(m: string) {
  m = m.replace(/enum ([A-Za-z]+)Type {/, 'type $1Type = ');
  return m.replace(/ {2}[A-Za-z]+With[A-Za-z_]+ = ("[a-z_]+"),?\n}?/g, '| $1');
}

function fixEnum2(m: string) {
  m = m.replace(/export enum ([A-Za-z_]+) {\n/g, 'export type $1 =');
  m = m.replace(/ {2}([A-Z_]+) = \d+,?\n/g, m =>
    m.replace(/ {2}([A-Z_]+) = \d+,?\n/, '| "$1"').toLowerCase()
  );
  return m.replace(/\}/, '');
}

function fixUnionType(m: string) {
  m = m.replace(/\n {2}(__type: [A-Za-z_]+Type.[A-Za-z_]+);\n/, '$1} &');
  m = m.replace(/ {2}[a-z_]+\?: undefined;\n/g, '');
  m = m.replace(/ {2}[a-z_]+: ([A-Za-z_]+);\n/, ' $1');
  m = m.replace(/}$/, ';');
  return m;
}

let allTypes = '';
for (const file of fs.readdirSync('./generated-types')) {
  if (file === 'index.ts') continue;
  const text = fs.readFileSync(`./generated-types/${file}`, 'utf8');
  const lines = text.split('\n');
  const firstTypeLine = lines.findIndex(line => line.startsWith('export'));
  const firstNonTypeLine = lines.findIndex(
    line => line.endsWith('Args;') || line.endsWith('Args {')
  );
  let actualTypes = lines.slice(firstTypeLine, firstNonTypeLine).join('\n');
  actualTypes = actualTypes.replace(
    /export interface I([A-Za-z_]+) {/g,
    'export type $1 = {'
  );
  actualTypes = actualTypes.replace(/([A-Za-z]+)\.I\1/g, '$1');
  actualTypes = actualTypes.replace(/([A-Za-z]+)\.\1/g, '$1');
  actualTypes = actualTypes.replace(/= I/g, '= ');
  actualTypes = actualTypes.replace(/\| I/g, '| ');
  actualTypes = actualTypes.replace(/ {4}/g, '  ');
  actualTypes = actualTypes.replace(
    /enum ([A-Za-z]+)Type {\n( {2}\1With([A-Za-z_]+) = "[a-z_]+",?\n)+}/g,
    fixEnum
  );
  actualTypes = actualTypes.replace(
    /export type ([A-Za-z]+)With([A-Za-z_]+) = {\n {2}(__type: \1Type.\1With\2);\n( {2}[a-z_]+\?: undefined;\n)*( {2}[a-z_]+: [A-Za-z_]+;\n)( {2}[a-z_]+\?: undefined;\n)*}/g,
    fixUnionType
  );
  actualTypes = actualTypes.replace(
    /__type: ([A-Za-z]+)Type\.\1With[A-Za-z_]+/g,
    m =>
      m
        .replace(
          /__type: [A-Za-z]+Type\.[A-Za-z]+With([A-Za-z_]+)/,
          '__type: "$1"'
        )
        .toLowerCase()
  );
  actualTypes = actualTypes.replace(
    /export enum ([A-Za-z_]+) {\n( {2}[A-Z_]+ = \d+,?\n)+}/g,
    fixEnum2
  );
  actualTypes = actualTypes.replace(/Json/g, 'JSON');
  actualTypes = actualTypes.replace(/Sql/g, 'SQL');
  actualTypes = actualTypes.replace(/__type/g, 'kind');
  actualTypes = actualTypes.replace(/With[A-Za-z_]+/g, snakeToCamel);
  allTypes += actualTypes + '\n';
}

// eslint-disable-next-line no-console
console.log(allTypes);

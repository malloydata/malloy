import "./airports.malloy"

// --
// Name: Show all Data
// The Equivqalent of a SELECT * in SQL.

query: airports -> {
  project: *
}

// --
// Name: Filtering Data
//  New York City District Airports

query: airports -> {
  where: faa_dist = 'NYC'
  project: *
}

// --
// Name: Named query
// Runs the query declared in the model below

query: airports->by_state

// --
// Name: Named query with a filter applied to the source
// Filters query to major airports

query: airports {where: major='Y'}->by_state

// --
// Name: Aggregates: Simple Query with Aggregates

// Calculations can be written into the query

query: airports->{
  group_by: state
  aggregate:
    airport_count is count(*)
    avg_elevation is elevation.avg()
    percentage_of_all_airports_in_usa is count(*)/all(count(*))*100
  order_by: avg_elevation desc
}

// --
// Name: Modeled Query Aggregates (measures)

// Calculations can come from the model.  In this case all the
//  calculations are from the model below.

query: airports->{
  group_by: state
  aggregate:
    airport_count
    avg_elevation
    percentage_of_all_airports_in_usa is percent_of_all_airports
  order_by: avg_elevation desc
}

// --
// Name: Filtered aggregate expressions
query: airports->{
  group_by:
    state
  aggregate:
    airport_count
    gliderport_count is airport_count {where: fac_type = 'GLIDERPORT'}
    avg_heliport_elevation is elevation.avg() {where: fac_type = 'HELIPORT'}
    percent_major is airport_count {? major = 'Y'}/airport_count * 100
}

// --
// Name: Nesting results
// Queries can be nested in one another.  The outer query essentially
//  becomes the filter for the nested query.

query: airports->{
  group_by: faa_region
  aggregate:
    airport_count
    heliport_count
  nest: by_state is {
    group_by: state
    aggregate: airport_count
  }
  nest: top_counties is {
      group_by: state, county
      aggregate:airport_count
      limit: 5
  }
  nest: by_fac_type is {
    group_by: fac_type
    aggregate: airport_count
  }
}

// --
// Name: Refinements (Inheritence) of queries
// Modeled queries can be changed and expanded.  In this case
//  we expand the reult limit to 50 and add a couple of measures

query: airports->by_state + {
  limit: 50
  aggregate:
    avg_elevation
    heliport_count
}

// --
// Name: Named nested queries and refinements
// We can simply nest one query in another by refining it.

query: airports-> by_state + {
  nest: by_facility_type
}

// --
// Name: Rendering results
// Changing the name of a query can change how it is rendered.
query: airports-> by_state + {
  nest: fac_type_bar_chart is by_facility_type
}

// --
// Name: Filtering nested Queries
// You can apply filters to nested queries
query: airports-> by_state + {
  nest: fac_type_bar_chart is by_facility_type + {? fac_type = 'AIRPORT' | 'HELIPORT'}
}

// --
// Name: Region Dashboard
// You can nest things by name.  The name of the column
//  determines how it is rendered (in this case, shape_map)

query: airports -> {
  group_by: faa_region
  aggregate: airport_count
  nest:
    by_state_shape_map is by_state
    fac_type_bar_chart is by_facility_type
}

// --
// Name: Ungrouped Calculations
// Aggregate can escape the current grouping in a query using the 'all'
//  function.  A takes an aggregate calculation (modelled or expplicit)
//  and runs without dimensional grouping.

query: airports-> {
  group_by:
    fac_type
    state
  aggregate:
    airport_count
    overall_totall is all(airport_count)
    all_in_state is all(airport_count, state)
    all_of_fac_type is all(airport_count, fac_type)
    percent_in_state is airport_count/all(airport_count,state)*100
  order_by: state, fac_type
  limit: 100
}

// --
// Name: Pipelines Step 1
// Let's start with this query
query: airports-> {
  group_by: state
  nest: by_county is {
    group_by: county
    aggregate: airport_count // order_by this descending by default
    limit: 2
  }
}

// --
// Name: Pipelines Step 2
// Find the top two counties in each state.
//  See the previous query to run the first part
query: airports-> {
  group_by: state
  nest: by_county is {
    group_by: county
    aggregate: airport_count // order_by this descending by default
    limit: 2
  }
}
-> {
  project: state, by_county.county, by_county.airport_count
  order_by: state, county
}

// --
// Name: Refining a source (Inheriting from)
// Create a new source from airports.
//  add a filter so the source only contain major airports
//  the '+' means add parameters
//
source: major_airports is airports + {
  where: major = 'Y'
  measure:
    count_with_control_tower is airport_count {? cntl_twr = 'Y'}
}

// Look at major airports by district and state
query: major_airports-> {
  group_by: faa_dist
  aggregate: airport_count, count_with_control_tower
  nest: by_state is {
    group_by: state
    aggregate: airport_count, count_with_control_tower
    nest: by_airport is {
      group_by: code, city, elevation, cntl_twr
    }
  }
  order_by: 1
}